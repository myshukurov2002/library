package com.company.library_project.controller;import com.company.library_project.dto.ApiResponse;import com.company.library_project.dto.BookDTO;import com.company.library_project.service.BookService;import io.swagger.v3.oas.annotations.Operation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import javax.validation.Valid;import java.util.List;@RestController@RequestMapping("/api/v1/book")public class BookController {    @Autowired    private BookService bookService;    @PostMapping("/create")    @Operation(summary = "create book ‚ûï", description = "this api used for book creation")    @PreAuthorize("hasAnyRole('MODERATOR', 'SUPER_ADMIN')")    public ResponseEntity<ApiResponse<?>> create(@RequestBody BookDTO dto) {        ApiResponse<?> response = bookService.create(dto);        if (response.getStatus()) {            return ResponseEntity.ok(response);        }        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);    }    @PutMapping("/update/{id}")    @Operation(summary = "update book üõ†Ô∏è", description = "this api used for book update")    @PreAuthorize("hasAnyRole('MODERATOR', 'SUPER_ADMIN')")    public ResponseEntity<ApiResponse<?>> update(@PathVariable String id,                                                 @Valid @RequestBody BookDTO dto) {        ApiResponse<?> response = bookService.update(id, dto);        if (response.getStatus()) {            return ResponseEntity.ok(response);        }        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);    }    @DeleteMapping("/delete/{id}")    @Operation(summary = "delete book ‚ùå", description = "this api used for book delete")    @PreAuthorize("hasAnyRole('MODERATOR', 'SUPER_ADMIN')")    public ResponseEntity<ApiResponse<?>> delete(@PathVariable String id) {        ApiResponse<?> response = bookService.delete(id);        if (response.getStatus()) {            return ResponseEntity.ok(response);        }        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);    }    @GetMapping("/getById/{id}")    @Operation(summary = "getById book üìï", description = "this api used for book getById")    @PreAuthorize("hasAnyRole('MODERATOR', 'SUPER_ADMIN')")    public ResponseEntity<ApiResponse<?>> getById(@PathVariable String id) {        ApiResponse<?> response = bookService.getById(id);        if (response.getStatus()) {            return ResponseEntity.ok(response);        }        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);    }    @GetMapping("/getList")    @Operation(summary = "getList book üìÑüìï", description = "this api used for book getList")    @PreAuthorize("hasAnyRole('MODERATOR', 'SUPER_ADMIN')")    public ResponseEntity<List<?>> getList() {        return ResponseEntity.ok(bookService.getList());    }    @GetMapping("/paging")    @Operation(summary = "paging book üìñüìï", description = "this api used for book paging")    @PreAuthorize("hasAnyRole('MODERATOR', 'SUPER_ADMIN')")    public ResponseEntity<Page<?>> paging(@RequestParam(defaultValue = "0") int page,                                          @RequestParam(defaultValue = "20") int size) {        return ResponseEntity.ok(bookService.paging(page, size));    }    @GetMapping("/paging/by-wardrobId/{wardrobeId}")    @Operation(summary = "paging book üìñüìï", description = "this api used for book paging")    @PreAuthorize("hasAnyRole('MODERATOR', 'SUPER_ADMIN')")    public ResponseEntity<Page<?>> paging(@PathVariable String wardrobeId,                                          @RequestParam(defaultValue = "0") int page,                                          @RequestParam(defaultValue = "20") int size) {        return ResponseEntity.ok(bookService.pagingByWardrobeId(wardrobeId, page, size));    }    @GetMapping("/paging/by-author/{author}")    @Operation(summary = "paging book üìñüìï", description = "this api used for book paging")    @PreAuthorize("hasAnyRole('MODERATOR', 'SUPER_ADMIN')")    public ResponseEntity<Page<?>> pagingByAuthor(@PathVariable String author,                                          @RequestParam(defaultValue = "0") int page,                                          @RequestParam(defaultValue = "20") int size) {        return ResponseEntity.ok(bookService.pagingByAuthor(author, page, size));    }    @GetMapping("/paging/by-title/{title}")    @Operation(summary = "paging book üìñüìï", description = "this api used for book paging")    @PreAuthorize("hasAnyRole('MODERATOR', 'SUPER_ADMIN')")    public ResponseEntity<Page<?>> pagingByTitle(@PathVariable String title,                                                  @RequestParam(defaultValue = "0") int page,                                                  @RequestParam(defaultValue = "20") int size) {        return ResponseEntity.ok(bookService.pagingByTitle(title, page, size));    }}